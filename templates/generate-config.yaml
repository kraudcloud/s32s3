apiVersion: v1
kind: Pod
metadata:
  # The reason we use a job to generate the config is that rclone stores its passwords in a weird way in the config file.
  # It's impossible to replicate with helm, so we have to use a job to generate the config file.
  name: "{{.Release.Name }}-config-{{ now | unixEpoch }}"
  namespace: {{.Release.Namespace }}
  labels: {{ include "s32s3.labels" . | nindent 4 }}
spec:
  imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 4 }}
  serviceAccountName: {{ .Release.Name }}
  securityContext: {{ toYaml .Values.podSecurityContext | nindent 4 }}
  nodeSelector: {{ toYaml .Values.nodeSelector | nindent 4 }}
  tolerations: {{ toYaml .Values.tolerations | nindent 4 }}
  affinity: {{ toYaml .Values.affinity | nindent 4 }}
  restartPolicy: Never
  containers:
    - name: {{.Release.Name }}-config
      image: "{{ .Values.image.repository }}{{if .Values.image.tag}}:{{.Values.image.tag }}{{end}}"
      resources: {{ toYaml .Values.resources | nindent 8 }}
      imagePullPolicy: {{ .Values.image.pullPolicy }}
      command: ["/bin/sh", "-c"]
      {{ $sec := lookup "v1" "Secret" .Release.Namespace "s32s3-config" }}
      args:
        - |
          rclone config touch

          echo "creating source"

          rclone config create --non-interactive source s3 \
            {{- range $key, $value := .Values.config.source }}
            "{{ $key }}=$SOURCE_{{ $key | upper }}" \
            {{- end }}

          echo "creating destination"
            
          rclone config create --non-interactive backup s3 \
            {{- range $key, $value := .Values.config.destination }}
            "{{ $key }}=$DEST_{{ $key | upper }}" \
            {{- end }}

          echo "creating crypt"

          rclone config create --non-interactive dest crypt \
            remote="backup:" \
            directory_name_encryption=false \
            password=$(rclone obscure $CRYPT_PASSWORD) \
            password2=$(rclone obscure $CRYPT_PASSWORD2)

          echo "writing config"

          curl -s -X PUT -d "{
            \"apiVersion\": \"v1\",
            \"kind\": \"Secret\",
            \"metadata\": {
              \"name\": \"{{.Release.Name }}-config\"
            },
            \"data\": {
              \"rclone.conf\": \"$(cat /config/rclone/rclone.conf | base64 -w 0)\"
            }
          }" \
          -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
          -H "Content-Type: application/json" \
          -k https://kubernetes.default/api/v1/namespaces/{{ .Release.Namespace }}/secrets/{{.Release.Name }}-config \
          -o /dev/null
      env:
        # passwords are special cased because they need to be obscured by rclone
        - name: CRYPT_PASSWORD
          {{- if .Values.config.crypt.password }}
          {{- .Values.config.crypt.password | toYaml | nindent 10}}
          {{- else }}
          {{ fail (printf "config.crypt.password is required") }}
          {{- end }}
        - name: CRYPT_PASSWORD2
          {{- if .Values.config.crypt.password2 }}
          {{- .Values.config.crypt.password2 | toYaml | nindent 10}}
          {{- else }}
          {{ fail (printf "config.crypt.password2 is required") }}
          {{- end }}
          {{- range $key, $value :=.Values.config.destination }}
        - name: DEST_{{ $key | upper }}
          {{- $value | toYaml | nindent 10}}
          {{- end }}
          {{- range $key, $value :=.Values.config.source }}
        - name: SOURCE_{{ $key | upper }}
          {{- $value | toYaml | nindent 10}}
          {{- end }}